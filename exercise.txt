nux常用命令熟悉, 终端熟悉
1. 列举当前登录的用户的用户名，每行一个，每个用户名只出现一次，结果按字典序排序。（提示：参考who命令）
 解：
who|awk ' {print $1}'|sort -u
2. 简单的英文拼写检查程序。现有一输入文件，内容为大小写混杂的英文单词，以一个或多个空格分隔。另有一词典文件，
每行一个单词，小写。请用linux命令找出输入文件中所有不在词典内的单词，不区分大小写，输出内容也不需要区分大小
写。（提示：参考tr和comm命令）
   cat e2_1.txt | tr '[A-Z]' '[a-z]' > tmp.txt  #大小写变换
   sed -i 's/ * /\n/g' tmp.txt               #每个单词一行
   sort -u tmp.txt > tmp2.txt              #把文件单词排序
   comm e2_2.txt tmp2.txt                #输出不一样的结果

3. 写一个正则表达式能匹配和验证15位和18位的身份证
　　^\d{15}$|^\d{18}$|^\d{17}(\d|x|X)$
4. 用linux命令实现两个文件的交,并,差操作
cat e4_1.txt | tr '[A-Z]' '[a-z]' > tmp1.txt　　
cat e4_2.txt | tr '[A-Z]' '[a-z]' > tmp2.txt　＃　统一大小写
sed -i 's/[^A-Za-z]/\n/g' tmp1.txt　　　　＃去掉标点且每个单词一行
sed -i 's/[^A-Za-z]/\n/g' tmp２.txt　　　　＃去掉标点且每个单词一行
sort -u tmp1.txt >tmp3.txt　　　　　　　　＃排序
sort -u tmp2.txt >tmp4.txt　　　　　　　　＃排序
comm tmp4.txt tmp3.txt              　　 #输出不一样的结果
Python习题
5.有如下log文件，请打印出独立IP，并统计独立IP数，（分别使用python和shell）:
   log文件内容:
   218.79.251.215 - - [23/May/2006:08:57:44 +0800] "GET /fg172.exe HTTP/1.1" 206 2350253
   220.178.150.3 - - [23/May/2006:08:57:40 +0800] "GET /fg172.exe HTTP/1.1" 200 2350253
   59.42.2.185 - - [23/May/2006:08:57:52 +0800] "GET /fg172.exe HTTP/1.1" 200 2350253
   219.140.190.130 - - [23/May/2006:08:57:59 +0800] "GET /fg172.exe HTTP/1.1" 200 2350253
   221.228.143.52 - - [23/May/2006:08:58:08 +0800] "GET /fg172.exe HTTP/1.1" 206 719996
   221.228.143.52 - - [23/May/2006:08:58:08 +0800] "GET /fg172.exe HTTP/1.1" 206 713242
   221.228.143.52 - - [23/May/2006:08:58:09 +0800] "GET /fg172.exe HTTP/1.1" 206 1200250

Pytnon :
lis = []
with open('logt') as tmp:
    lines = tmp.readlines()
    for l in lines:
        lis.append(l.split(' - - ')[0])
a=set(lis)
print 'the ip is : %s,the count is %d '  %(a,len(a))

shell:
cat e5 | awk '{split($0,lis," - - ");print lis[1]}' | sort -u
6. 给你一个大文件，每行一条英文语句，如”i am a student”，要求实现用户输入一个短语，能够检索出最相似的N条英文。相似度算法自定义。

import os
import re
lis=raw_input("Please enter the sentence : ")
print lis
with open('e6engl') as tmp:
    lines = tmp.readlines()                           
    row_number =len(lines)                                     
    coun = [ 0 for i in range(row_number)]                 
    li=re.split(r'\s+',lis)     
    lis_len=len(li)    
    print lines 
    number=-1                          
    for I in lines: 
        number=number+1                                       
        Ic=re.split(r'\s+',I)
        I_long=len(Ic)
        for j in range(lis_len):                            
            for k in range(I_long):
                if cmp(li[j].lower(),Ic[k].lower())==0:
                    coun[number]=coun[number]+1                      
    for m in range(row_number):                              
        if coun[m]==max(coun):
            print 'The similar sentence is: %s ' %lines[m]

